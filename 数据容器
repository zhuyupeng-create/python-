#迭代
for i in 'python':
    print(i)
#列表-list
#列表生成
a_list = []
a_list.append(1)
print(a_list)
b_list = list(range(1,9))
b_list.append(23)
print(b_list)
c_list = [2**x for x in range(8)]
c_list.append(222)
print(c_list)
import random
n = 10
import random
n = 10
a_list = [random.randrange(1,100) for i in range(n)]
b_list = [x for x in a_list if x % 2 == 0]
c_list = a_list + b_list + a_list * 2
print(a_list)
print(b_list)
#索引
print(c_list)
print(c_list[3])
print(c_list[:])
print(c_list[5:])
print(c_list[:3])
print(c_list[3:5])
del c_list[3:5]
print(f'c_list：{c_list}')
#替换
c_list[1:5:2] = ['a',2]
print(c_list)

import random
n = 3
a_list = [random.randrange(65,91) for i in range(n)]
b_list = [chr(random.randrange(65,91)) for i in range(n)]
c_list = a_list + b_list + a_list * 2
print(a_list)
print(b_list)
print(c_list)
a_list *= 3
print(a_list)
#内建函数
print(len(a_list))
print(max(a_list))
print(min(a_list))
#列表排序
a_list.sort()
print(a_list)
a_list.sort(reverse=True)
print(a_list)
b_list.sort()
print(b_list)
b_list.sort(reverse=True)
print(b_list)

import random
n = 3
a_list = [random.randrange(65,91) for i in range(n)]
b_list = [chr(random.randrange(65,91)) for i in range(n)]
c_list = a_list + b_list + a_list * 2
print(a_list)
print(b_list)
print(c_list)

c_list.append('100')#追加
print(c_list)

a_list.clear()#清空列表
print(a_list)

d_list = c_list.copy()#copy
print(d_list)
del d_list[6:8]
print(d_list)

print(a_list)
a_list.extend(c_list)#添加列表
print(a_list)

import random
n = 3
a_list = [random.randrange(1,10) for i in range(n)]
print(a_list)
a_list.insert(1,'shadiao')
print(a_list)
a_list.remove('shadiao')
print(a_list)
p = a_list.pop(2)#删除并返回被删除的数值
print(p)
#not supported between instances of 'str' and 'int'     a_list.sort()
a_list.reverse()
print(a_list)

#原组、集合与列表的转换
import random
n = 3
a_list = [random.randrange(1,10) for i in range(n)]
print(a_list)
c = tuple(a_list)
d = set(a_list)#存在去重操作
print(c)
print(d)
print(type(a_list))
print(type(c))
print(type(d))
#page110，集合作图
import matplotlib.pyplot as plt
from matplotlib_venn import venn2

admins = {'Moose', 'Joker', 'joker'}
moderators = {'Ann', 'Chris', 'Jane', 'Moose', 'Zero'}

v = venn2(subsets=(admins, moderators), set_labels=('admins','moderators'))
v.get_label_by_id('11').set_text('\n'.join(admins & moderators))
v.get_label_by_id('10').set_text('\n'.join(admins - moderators))
v.get_label_by_id('01').set_text('\n'.join(admins ^ moderators))

plt.show()

from matplotlib import pyplot as plt
import numpy as np
from matplotlib_venn import venn3, venn3_circles
plt.figure(figsize=(4,4))
v = venn3(subsets=(1, 1, 1, 1, 1, 1, 1), set_labels = ('A', 'B', 'C'))
v.get_patch_by_id('100').set_alpha(1.0)
v.get_patch_by_id('100').set_color('white')
v.get_label_by_id('100').set_text('Unknown')
v.get_label_by_id('A').set_text('Set "A"')
c = venn3_circles(subsets=(1, 1, 1, 1, 1, 1, 1), linestyle='dashed')
c[0].set_lw(1.0)
c[0].set_ls('dotted')
plt.title("Sample Venn diagram")
plt.annotate('Unknown set', xy=v.get_label_by_id('100').get_position() - np.array([0, 0.05]), xytext=(-70,-70),
             ha='center', textcoords='offset points', bbox=dict(boxstyle='round,pad=0.5', fc='gray', alpha=0.1),
             arrowprops=dict(arrowstyle='->', connectionstyle='arc3,rad=0.5',color='gray'))
plt.show()

#更新
admins = {'Moose', 'Joker', 'joker'}
moderators = {'Ann', 'Chris', 'Jane', 'Moose', 'Zero'}
admins.update('kobe', 'joker')
print(admins)
admins.intersection_update('kobe','joker')
print(admins)
admins.difference_update('o')
admins.add('kobe')
print(admins)
admins.remove('Moose')
print(admins)
admins.discard('Joker')
print(admins)




